这一期我们来一起学习Python测试，调试，异常处理以及断言的方法。

代码编写完成后，我们第一步需要做的就是测试和调试，通过测试来判断程序的功能性是否满足，
如果测试过程中出现我们意料之外的结果，也就是我们经常听说的bug，我们就需要继续调试代码。

为了方便我们测试与调试，我们可以在代码编写阶段尽量将代码模块化，这样调试的时候可以分模块进行。
另外为了方便后期的测试与调试，在编写代码每个模块时，
可以通过备注的方式，标明这个模块设计时期望的输入与输出，以及代码设计时假定的一些前提条件。

首先我们看一下什么时候需要测试，在测试之前，我们需要确保代码是可以运行的。
其次，测试之前我要明确输入与输出的对应关系。给定一个输入，我们要先有一个明确的期望的输出。
例如下面这段代码
def is_bigger(x, y):
  """ Assumes x and y are ints
  Returns True if y is less than x, else False """
直观上来看，这段代码我们可以从三个角度进行测试，
第一个角度，我们测试x大于y时的输出结果，
第二个角度，我们测试x小于y时的输出结果，
第三个角度，我们测试x等于y时的输出结果。
如果这三类都满足我们的要求的话，我们就完成了简单的测试。

上面这例子分类比较容易，但是大多时候我们需要测试的代码不是这么容易就能把所有的类别都分出来的。
这时候我们可以根据需要选择下面这两种测试方法 黑盒测试和透明盒测试。
所谓黑盒测试，就是测试的时候不需要看具体代码，只要去判断输入和输出的关系是否匹配
而透明盒测试则是根据具体代码设计测试方案。

首先我们看一下黑盒测试，黑盒测试时，我们需要尽可能的覆盖所有可能的情况，例如我们要测试实现下面这个功能的代码
def sqrt(x, eps):
  """ Assumes x, eps floats, x >= 0, eps > 0
  Returns res such that x-eps <= res*res <= x+eps """
  
根据注释，我们可以看出代码的功能是在给定的精度范围内求解给定数的平方根。
我们在测试方案的时候首先考虑边界条件，例如
x=0并且eps接近0的情况，我们可以取一组eps = 0.0001
此外，我们还要考虑一些特殊情况，例如x为完全平方根，x的根为无理数，x小于1等情况。
另外，我们还要考虑一些不常见的情况，如x很大，或者x很小，eps很大，eps很小的情况
以及这几种情况之间的不同组合。

基于上面这些情况，我们可以设计下面表中这样几组测试方案来实现这个例子的黑盒测试。

接下来我们来看一下透明盒测试，透明盒测试是根据具体的代码设计测试方案的，
当我们在进行透明盒测试的时候，如果代码中每一组可能的路径都被我们测试过了，
就称为完整路径测试。
例如代码中有分支语句，我们就把每个分支的情况都纳入测试方案中，
例如代码中有for循环，我们需要测试不进入for循环的情况，进入一次for循环的情况，以及进入多次for循环的情况。
例如代码中有while循环，也是类似的，我们需要测试所有可能跳出while循环的路径。
def abs(x):
  """ Assumes x is an int
  Returns x if x>=0 and –x otherwise """ 
  if x < -1:
    return –x 
  else:
    return x
   
例如我们测试这段代码，首先进行完整路径测试，我们需要测试满足 x < -1的情况，以及其他的情况，
例如我们可以分别测试x=-3和x=3的情况。除了要进行完整路径测试以外，我们还要测试边界情况。也就是x=-1的情况。

对于这个代码我们会发现，当x=-1的时候，返回的结果是-1。这是不满足代码的要求的。
测试出现问题后，我们需要进行下一步工作，也就是代码的调试。调试的目的是去修复测试过程中遇到的问题。



测试有两种，黑盒测试和透明盒测试
黑盒测试：
测试时不看具体代码
不一定需要开发者本人进行测试
测试案例可以被重复使用
当代码中每一条可能的路径都被测试了，称为path complete

透明盒测试：
根据代码设计测试台架

测试原则：
错误做法
1. 写完整个程序
2. 测试整个程序
3. 调试整个程序
正确做法：
1. 使用函数
2. 测试和调试函数
3. 写下一个函数
4. 测试并调试函数

错误做法：
1. 直接修改代码
2. 记住bug的位置
3. 测试代码
4. 忘记了bug的位置和修改的位置
5. 。。。。
正确做法：
1. 备份代码
2. 修改代码
3. 通过注释标记潜在bug的位置
4. 测试代码
5. 比较旧代码和新代码

异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。
一般情况下，在Python无法正常处理程序时就会发生一个异常。
异常是Python对象，表示一个错误。
当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。

捕捉异常可以使用try/except语句。
try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
如果你不想在异常发生时结束你的程序，只需在try里捕获它。

下面我们来看一下一些常见的异常
常见的异常：
• trying to access beyond list limits
test = [1,7,4]
test[4]
IndexError
• trying to convert an inappropriate type
int(test)
TypeError
• referencing a non-existing variable
a
NameError
其他异常：
• mixing data types without coercion
'a'/4  TypeError
• SyntaxError: Python can’t parse program
• NameError: local or global name not found
• AttributeError: attribute reference fails
• TypeError: operand doesn’t have correct type
• ValueError: operand type okay, but value is illegal
• IOError: IO system reports malfunction (e.g. file not

代码中可以通过try-except命令，实现异常时的输出，
try:
  a = int(input("Tell me one number:"))
  b = int(input("Tell me another number:")) print(a/b)
except:
  print("Bug in user input.")
以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。

还可以通过except来指定异常种类，然后根据不同的异常，向用户输出不同的内容。
try:
  a = int(input("Tell me one number: "))
  b = int(input("Tell me another number: ")) print("a/b = ", a/b)
  print("a+b = ", a+b)
except ValueError:
  print("Could not convert to a number.")
except ZeroDivisionError:
  print("Can't divide by zero")
except:
  print("Something went very wrong.")
  
除此之外，处理异常的语句还有 finally，

最后我们一起来学习断言的用法：
def avg(grades):
  assert len(grades) != 0, 'no grades data'
  return sum(grades)/len(grades)
如果 len(grades) != 0 不满足，那么输出 'no grades data'

尽早发现错误

With the below implementation, is the test set "n = 4 | n = -4 | n = 5" path complete?
def is_even(n):
    """ 
    Returns True if a number is even
    and False if not 
    """
    if n > 0 and n % 2 == 0:
        return True
    elif n < 0 and n % 2 == 0:
        return True
    else: 
        return False
        
With the above implementation, which value for n is incorrectly labeled by is_even?

Below is a piece of code and an error shown when running it. What is the problem?
L = 3
for i in range(len(L)):
    print(i)

ERROR MESSAGE:

 File "C:/Users/Ana/.spyder2-py3/temp.py", line 2, in 
    for i in range(len(L)):

TypeError: object of type 'int' has no len()

If the user enters "twenty" in the code below what does the program do?
try:
    n = int(input("How old are you? "))
    percent = round(n*100/80, 1)
    print("You've gone through", percent, "% of your life!")
except ValueError:
    print("Oops, must enter a number.")
except ZeroDivisionError:
    print("Division by zero.")
except:
    print("Something went very wrong.")
    
If the user enters "0" in the code above what does the program do?







