这一期我们来一起学习一下Python中的面向对象编程。
Python从设计之初就已经是一门面向对象的语言
首先我们来看一下什么是对象。
在python中，对象一般都是数据
目前我们见到的每一个对象都有一个特定的类型
1234 是个整型对象
3.1415 是个浮点型对象
“Hello”  是字符串型对象
[1, 2, 3, 4] 是一个列表对象
{"CA":"California", "MA":Massachusetts} 是一个字典对象
实际上，Python中所有的东西都被称作对象，每隔对象都有一个类型。
例如我们编写一个函数
实现某个功能，这个函数也是一个对象。

首先，我们创建某个类型的对象，
然后，我们可以去操作这些对象。例如修改，连接，移动等
最后，我们可以销毁这些对象，例如对于一个列表，我们可以通过del命令清除列表。

定一个对象，首先需要定义对象代表什么。
然后需要明确如何与这个对象交互

例如车是一个对象，他代表一个有四个轮子，有方向盘等等的一个物体
然后我们可以驾驶这辆车，可以按喇叭等等。

例如列表这个对象，[1,2,3,4]
对于python来说，列表中每个元素实际上由索引和指针两部分组成。
索引告诉python第0和元素是1，第1个元素是2。而指针告诉python每一个元素的位置，
并把列表中的元素串起来。
L = 1 -> 2 ->3 -> 4 ->
如何操作列表这个对象，这个我们前面已经共同学习过了。
 L[i], L[i:j], +
• len(), min(), max(), del(L[i])
• L.append(),L.extend(),L.count(),L.index(),
L.insert(),L.pop(),L.remove(),L.reverse(), L.sort()

对于一个对象，他的内部含义应该是不公开的，也就是私密的。我们只需要知道怎么操作就可以了。

下面我们来看一下如何根据我们自己的需求创建一个对象。
我们需要创建一个类，在类里面我们要定义交互方式，也就是用户如何调用，
类用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。

下面我们来创建一个坐标对象。我们在XY平面坐标系中定义一个点，点的坐标是（x，y）。
首先我们定义类，定义类的格式是
class Coordinate(object) :
    #define attribute here
定义以关键词 class 开始，然后定义类的名称，然后这里的object
是Python中最基本的一个类型。这里表示我们定义的类 Coordinate是一个object，并且它会继承object所有的特性。
所以Coordinate是Object的一个子类，相反地，Object是Coordinate的父类。关于继承，我们会在下一期详细介绍。
然后下面开始定义这个类的属性
属性的定义包括数据属性（Data Attributes）和程序属性（procedural attributes）
所谓数据属性，就是这个类中会调用的数据对象。例如一个坐标由两个数字组成。
所以程序属性，就是这个类内部涉及的一些函数，以及定义与这个类交互的方法。例如，我们可以定义两个坐标类之间的距离。
但是这个距离对类以外的其他对象是无效的。

首先创建一个类的实例，使用一个特殊的方法 __init__ （注意这里init前后是两个下划线）来创建一些数据属性：被
称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法
class Coordinate(object):
在创建完对象之后 会自动调用, 它完成对象的初始化的功能
    def __init__(self, x, y):
        self.x = x
        self.y = y
self 代表类的实例，self 在定义类的方法时是必须有的。当你第一次创建这个类型的对象时，
会告诉python调用这个方法。

这样我们就简单创建了一个类  Coordinate，他有两个参数，分别是x和y。
c = Coordinate(3, 4)  对象
origin = Coordinate(0, 0)   对象
print(c.x)
print(origin.x)

Python always passes the object as the first argument • convention is to use self as the name of the first
argument of all methods
the “.” operator is used to access any attribute • a data attribute of an object
• a method of an object

我们还可以在这里类哩定义更多的方法，例如我们再定义一个距离distance
class Coordinate(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def distance(self, other):
        x_diff_sq = (self.x - other.x)**2
        y_diff_sq = (self.y - other.y)**2
        return (x_diff_sq + y_diff_sq)**0.5
        
c = Coordinate(3, 4)
origin = Coordinate(0, 0)
print(c.x)
print(origin.x)
print(c.distance(origin))
print(Coordinate.distance(c,origin))

3
0
5.0
5.0

print(c)
<__main__.Coordinate object at 0x7ff8ce86a588> 

class Coordinate(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def distance(self, other):
        x_diff_sq = (self.x - other.x)**2
        y_diff_sq = (self.y - other.y)**2
        return (x_diff_sq + y_diff_sq)**0.5
    def __str__(self):
        return "<" + str(self.x) + "," + str(self.y) + ">"
c = Coordinate(3, 4)
origin = Coordinate(0, 0)
print(c.x)
print(origin.x)
print(c.distance(origin))
print(Coordinate.distance(c,origin))

print(c)
3
0
5.0
5.0
<3,4>
__str__ 返回一个对象的描述信息(必须是string)
_str__方法需要返回一个字符串，当做这个对象的描写

print(type(c))
 <class __main__.Coordinate> 因为对象c是类Coordinate
print(Coordinate)
 <class __main__.Coordinate> 因为Coordinate就是类
print(type(Coordinate))
 <type 'type'> 因为Coordinate类是对象的一种类型

print(isinstance(c, Coordinate)) 查看一个对象是否是类Coordinate

常用的方法：
__add__(self, other)    self + other
__sub__(self, other)    self - other
__eq__(self, other)     self == other
__lt__(self, other)     self < other
__len__(self)           len(self)
__str__(self)           print self

下面我们来看一个例子，建立一个分数类
class Fraction(object):
    """
    A number represented as a fraction
    """
    def __init__(self, num, denom):
        """ num and denom are integers """
        assert type(num) == int and type(denom) == int, "ints not used"
        self.num = num
        self.denom = denom
    def __str__(self):
        """ Retunrs a string representation of self """
        return str(self.num) + "/" + str(self.denom)
    def __add__(self, other):
        """ Returns a new fraction representing the addition """
        top = self.num*other.denom + self.denom*other.num
        bott = self.denom*other.denom
        return Fraction(top, bott)
    def __sub__(self, other):
        """ Returns a new fraction representing the subtraction """
        top = self.num*other.denom - self.denom*other.num
        bott = self.denom*other.denom
        return Fraction(top, bott)
    def __float__(self):
        """ Returns a float value of the fraction """
        return self.num/self.denom
    def inverse(self):
        """ Returns a new fraction representing 1/self """
        return Fraction(self.denom, self.num)

a = Fraction(1,4)
b = Fraction(3,4)
c = a + b # c is a Fraction object
print(c)
print(float(c))
print(Fraction.__float__(c))
print(float(b.inverse()))


 

