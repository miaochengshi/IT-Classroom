这一期我们来一起学习Python测试，调试，异常处理以及断言的方法。

代码编写完成后，我们第一步需要做的就是测试和调试，通过测试来判断程序的功能性是否满足，
如果测试过程中出现我们意料之外的结果，也就是我们经常听说的bug，我们就需要继续调试代码。
为了方便我们测试与调试，我们可以在代码编写阶段尽量将代码模块化，这样调试的时候可以分模块进行。
另外为了方便后期的测试与调试，在编写代码每个模块时，
可以通过备注的方式，标明这个模块设计时期望的输入与输出，以及代码设计时假定的一些前提条件。

准备代码测试时，首先确保代码时可以运行的，如果代码报错，可以先根据提示进行修改。
另外代码测试前，需要有明确的输入以及每个输入下期望的输出。
如果实际输出结果与期望值相同，就完成测试，否则需要调试，也就是debug。

测试有两种，黑盒测试和透明盒测试
黑盒测试：
测试时不看具体代码
不一定需要开发者本人进行测试
测试案例可以被重复使用
当代码中每一条可能的路径都被测试了，称为path complete

透明盒测试：
根据代码设计测试台架

测试原则：
错误做法
1. 写完整个程序
2. 测试整个程序
3. 调试整个程序
正确做法：
1. 使用函数
2. 测试和调试函数
3. 写下一个函数
4. 测试并调试函数

错误做法：
1. 直接修改代码
2. 记住bug的位置
3. 测试代码
4. 忘记了bug的位置和修改的位置
5. 。。。。
正确做法：
1. 备份代码
2. 修改代码
3. 通过注释标记潜在bug的位置
4. 测试代码
5. 比较旧代码和新代码

异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。
一般情况下，在Python无法正常处理程序时就会发生一个异常。
异常是Python对象，表示一个错误。
当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。

捕捉异常可以使用try/except语句。
try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
如果你不想在异常发生时结束你的程序，只需在try里捕获它。

下面我们来看一下一些常见的异常
常见的异常：
• trying to access beyond list limits
test = [1,7,4]
test[4]
IndexError
• trying to convert an inappropriate type
int(test)
TypeError
• referencing a non-existing variable
a
NameError
其他异常：
• mixing data types without coercion
'a'/4  TypeError
• SyntaxError: Python can’t parse program
• NameError: local or global name not found
• AttributeError: attribute reference fails
• TypeError: operand doesn’t have correct type
• ValueError: operand type okay, but value is illegal
• IOError: IO system reports malfunction (e.g. file not

代码中可以通过try-except命令，实现异常时的输出，
try:
  a = int(input("Tell me one number:"))
  b = int(input("Tell me another number:")) print(a/b)
except:
  print("Bug in user input.")
以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。


try:
  a = int(input("Tell me one number: "))
  b = int(input("Tell me another number: ")) print("a/b = ", a/b)
  print("a+b = ", a+b)
except ValueError:
  print("Could not convert to a number.")
except ZeroDivisionError:
  print("Can't divide by zero")
except:
  print("Something went very wrong.")

断言：
def avg(grades):
  assert len(grades) != 0, 'no grades data'
  return sum(grades)/len(grades)
如果 len(grades) != 0 不满足，那么输出 'no grades data'

With the below implementation, is the test set "n = 4 | n = -4 | n = 5" path complete?
def is_even(n):
    """ 
    Returns True if a number is even
    and False if not 
    """
    if n > 0 and n % 2 == 0:
        return True
    elif n < 0 and n % 2 == 0:
        return True
    else: 
        return False
        
With the above implementation, which value for n is incorrectly labeled by is_even?

Below is a piece of code and an error shown when running it. What is the problem?
L = 3
for i in range(len(L)):
    print(i)

ERROR MESSAGE:

 File "C:/Users/Ana/.spyder2-py3/temp.py", line 2, in 
    for i in range(len(L)):

TypeError: object of type 'int' has no len()

If the user enters "twenty" in the code below what does the program do?
try:
    n = int(input("How old are you? "))
    percent = round(n*100/80, 1)
    print("You've gone through", percent, "% of your life!")
except ValueError:
    print("Oops, must enter a number.")
except ZeroDivisionError:
    print("Division by zero.")
except:
    print("Something went very wrong.")
    
If the user enters "0" in the code above what does the program do?







