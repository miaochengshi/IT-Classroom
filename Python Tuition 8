这一期我们来一起学习Python测试，调试，异常处理以及断言的方法。

代码编写完成后，我们第一步需要做的就是测试和调试，通过测试来判断程序的功能性是否满足，
如果测试过程中出现我们意料之外的结果，也就是我们经常听说的bug，我们就需要继续调试代码。

为了方便我们测试与调试，我们可以在代码编写阶段尽量将代码模块化，这样调试的时候可以分模块进行。
另外为了方便后期的测试与调试，在编写代码每个模块时，
可以通过备注的方式，标明这个模块设计时期望的输入与输出，以及代码设计时假定的一些前提条件。

首先我们看一下什么时候需要测试，在测试之前，我们需要确保代码是可以运行的。
其次，测试之前我要明确输入与输出的对应关系。给定一个输入，我们要先有一个明确的期望的输出。
例如下面这段代码
def is_bigger(x, y):
  """ Assumes x and y are ints
  Returns True if y is less than x, else False """
直观上来看，这段代码我们可以从三个角度进行测试，
第一个角度，我们测试x大于y时的输出结果，
第二个角度，我们测试x小于y时的输出结果，
第三个角度，我们测试x等于y时的输出结果。
如果这三类都满足我们的要求的话，我们就完成了简单的测试。

上面这例子分类比较容易，但是大多时候我们需要测试的代码不是这么容易就能把所有的类别都分出来的。
这时候我们可以根据需要选择下面这两种测试方法 黑盒测试和透明盒测试。
所谓黑盒测试，就是测试的时候不需要看具体代码，只要去判断输入和输出的关系是否匹配
而透明盒测试则是根据具体代码设计测试方案。

首先我们看一下黑盒测试，黑盒测试时，我们需要尽可能的覆盖所有可能的情况，例如我们要测试实现下面这个功能的代码
def sqrt(x, eps):
  """ Assumes x, eps floats, x >= 0, eps > 0
  Returns res such that x-eps <= res*res <= x+eps """
  
根据注释，我们可以看出代码的功能是在给定的精度范围内求解给定数的平方根。
我们在测试方案的时候首先考虑边界条件，例如
x=0并且eps接近0的情况，我们可以取一组eps = 0.0001
此外，我们还要考虑一些特殊情况，例如x为完全平方根，x的根为无理数，x小于1等情况。
另外，我们还要考虑一些不常见的情况，如x很大，或者x很小，eps很大，eps很小的情况
以及这几种情况之间的不同组合。

基于上面这些情况，我们可以设计下面表中这样几组测试方案来实现这个例子的黑盒测试。

接下来我们来看一下透明盒测试，透明盒测试是根据具体的代码设计测试方案的，
当我们在进行透明盒测试的时候，如果代码中每一组可能的路径都被我们测试过了，
就称为完整路径测试。
例如代码中有分支语句，我们就把每个分支的情况都纳入测试方案中，
例如代码中有for循环，我们需要测试不进入for循环的情况，进入一次for循环的情况，以及进入多次for循环的情况。
例如代码中有while循环，也是类似的，我们需要测试所有可能跳出while循环的路径。
def abs(x):
  """ Assumes x is an int
  Returns x if x>=0 and –x otherwise """ 
  if x < -1:
    return –x 
  else:
    return x
   
例如我们测试这段代码，首先进行完整路径测试，我们需要测试满足 x < -1的情况，以及其他的情况，
例如我们可以分别测试x=-3和x=3的情况。除了要进行完整路径测试以外，我们还要测试边界情况。也就是x=-1的情况。

对于这个代码我们会发现，当x=-1的时候，返回的结果是-1。这是不满足代码的要求的。
测试出现问题后，我们需要进行下一步工作，也就是代码的调试。调试的目的是去修复测试过程中遇到的问题。

调试代码我们可以使用Spyder或者其他集成开发环境。也可以使用Python Tuitor，或者使用print语句分别查看中间代码的输出等等
使用print语句调试代码的时候，我们可以把print语句添加在调用函数处，有参数的位置，以及函数返回的位置，
此外，我们还可以使用二分法的思想，将print语句添加在每一轮需要调试代码的中间位置。

在我们测试或者调试过程中，常常会遇到一些常见的错误提示。
例如test = [1,2,3] then test[4]，我们去索引一个不存的位置，这个时候python会返回 IndexError
例如int(test)，我们将一个非数值型的参数强制类型转换为整数型，python会返回 TypeError
例如 我们去所以一个为定义的参数，会返回 NameError
例如'3'/4，我们将字符串与数值做运算，python会返回 TypeError
SyntaxError: Python can’t parse program
• NameError: local or global name not found
• AttributeError: attribute reference fails
• TypeError: operand doesn’t have correct type
• ValueError: operand type okay, but value is illegal
• IOError: IO system reports malfunction (e.g. file not found)

当我们遇到上述那些错误时，python就会停止运行，进而影响程序对后续代码的执行。这就是异常。
异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。
一般情况下，在Python无法正常处理程序时就会发生一个异常。

当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。

捕捉异常可以使用try/except语句。
try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
如果你不想在异常发生时结束你的程序，只需在try里捕获它。

例如，我们代码希望用户输入数值，但是我们无法确保用户输入的是数值，当用户输入的字符串或者其他内容时，
python就会发生异常，为了处理这种情况，我们可以使用try-except语句。
try:
  a = int(input("Tell me one number:"))
  b = int(input("Tell me another number:")) print(a/b)
except:
  print("Bug in user input.")
以上方式try-except语句捕获所有发生的异常。当python无法执行try中语句时，就会转而执行except中的语句。
例如用户输入wert，时，就会输出 Bug in user input。

但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。

除此之外，我们还可以通过except来指定异常种类，然后根据不同的异常，向用户输出不同的内容。
try:
  a = int(input("Tell me one number: "))
  b = int(input("Tell me another number: ")) print("a/b = ", a/b)
  print("a+b = ", a+b)
except ValueError:
  print("Could not convert to a number.")
except ZeroDivisionError:
  print("Can't divide by zero")
except:
  print("Something went very wrong.")
  
除此之外，处理异常的语句还有 finally。
finally后面的语句始终都会被执行，即使前面的语句出现错误或者异常。例如，无论代码是否有错误或者异常，
我们都会在代码执行结束之后关闭一个文档，这时就可以使用finally语句。

最后我们一起来学习断言的用法：
（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。
断言可以在条件不满足程序运行的情况下直接返回错误，而不必等待程序运行后出现崩溃的情况，例如我们的代码只能在 Linux 系统下运行，可以先判断当前系统是否符合条件。
def avg(grades):
  assert len(grades) != 0, 'no grades data'
  return sum(grades)/len(grades)
如果 len(grades) != 0 不满足，那么触发异常并输出 'no grades data'
使用断言可以帮助我们尽早发现错误。我们还可以使用断言来确保函数的每一次输入和输出都是正确的，以此来避免像函数传递错误的参数。
另外，在合适的位置使用断言，还可以帮助我们在调试时更方便地定位bug。

With the below implementation, is the test set "n = 4 | n = -4 | n = 5" path complete?
def is_even(n):
    """ 
    Returns True if a number is even
    and False if not 
    """
    if n > 0 and n % 2 == 0:
        return True
    elif n < 0 and n % 2 == 0:
        return True
    else: 
        return False
        
With the above implementation, which value for n is incorrectly labeled by is_even?

Below is a piece of code and an error shown when running it. What is the problem?
L = 3
for i in range(len(L)):
    print(i)

ERROR MESSAGE:

 File "C:/Users/Ana/.spyder2-py3/temp.py", line 2, in 
    for i in range(len(L)):

TypeError: object of type 'int' has no len()

If the user enters "twenty" in the code below what does the program do?
try:
    n = int(input("How old are you? "))
    percent = round(n*100/80, 1)
    print("You've gone through", percent, "% of your life!")
except ValueError:
    print("Oops, must enter a number.")
except ZeroDivisionError:
    print("Division by zero.")
except:
    print("Something went very wrong.")
    
If the user enters "0" in the code above what does the program do?







