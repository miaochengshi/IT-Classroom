上一期我们一起学习了函数用的用法。使用函数可以很大程度上简化我们的代码。
我们用函数定义一个功能，然后在需要实现这个功能的位置调用这个函数就可以了。

这一期，我们来一起学习一种新的数据类型。 叫做复合数据类型。
这类数据类型里面同时包含多种类型的数据，如 整数型，浮点型等等

这一期我们介绍两个符合数据类型，tuples 元组 和 list 列表。
 元组与字符串类似，都是用来表示一串内容。只是元组内的内容可能是任何类型的数据。
我们用小括号开定义并创建元组。例如
t = (2,"tju",3)
元组中不同元素用逗号隔开，不同元素可以是不同的数据类型。
例如这里第一个元素是整数型，第二个元素是字符型。
需要注意的是，元组中的元素是不能修改的，例如
t[1] = 4 报错
另外，当我们想创建只有一个元素的元组时，我们要在这个元素后面多输入一个逗号，
t1 = ("tju",)
否则的话，就会被创建成一个字符串的格式。

与对字符串的操作相似，我们也可以通过命令去索引元组中的每一个元素或者一些元素。
t[0] 2
t[1:2] (“tju”,)
t[1:3] ("tju", 3)
t[-1]  3



如果想获得元组中元素的个数，我们可以用
len(t)   3
 
我们还可以用加号运算符 + 完成元组的连接操作，例如
(2,"tju",3) + （5, 6）    （2, "tju", 3, 5, 6）

我们使用元组可以实现在函数的定义中传递多个元素。
def quotient_and_remainder(x, y):
    q = x // y
    r = x % y
    return (q, r)

(quot, rem) = quotient_and_remainder(4,5)
print("quot =", quot, "rem =", rem)

这里我们把两个数的商 q 和余数 r 分别作为元组中的两个元素返回，
只要在函数返回值处输入
return(q, r)

另外我们还可以用元组来传递参数，例如想把 q 的值和 r 的值互换，
一般的做法是引入一个临时变量 temp
temp = q
q = r
r = temp
但是，有了元组，我们只需要输入
(r, q) = (q, r)
就可以完成变量值的互换。不需要再借助于一个临时的变量来存储。

元组还可以嵌套定义，例如
a = ((1, "a"),(2, "b"),(3, "c"),(4, "d"))
元组a包含4个元素，没个元素本身又是一个包含两个元素的元组。

下面我们来看另一种类似的复合数据类型，列表 list
我们用方括号来创建一个列表，例如
L = [2, "a", 4, [1,2]]
列表的不同元素用逗号隔开，同样的，我们也可以在列表里再放一个列表作为一个元素。
对于列表L，我们用
len(L)获取他的元素个数
L[0]表示他的第一个元素。2
L[2] + 1 表示第3个元素与1相加运算的结果，也就是 5
L[3] 表示第4个元素，也就是另一个列表 [1,2]
同样的，L[4]超出了索引范围，会报错。
L[-3] 表示从右向左第3个元素，  “a”

另外，列表中的元素是可以修改的。
L[3] = "b"
这时候列表L就变成了
[2, "a", “b”, [1,2]]
L指向的是同一个对象，而不是在内存里新建了一个对象。

下面我们看一个例子，给定一个列表，
L1 = [1,4,2,6]
他的元素全是数值，我们计算列表中所有元素的和，
一种方法，我们可以用for循环索引L1中的每个元素，然后将他们相加.
L1 = [1, 4, 2, 6]
Total = 0
for i in range(len(L1)):
    Total = Total + L1[i]
print(Total)

另外，我们还可以直接用在列表中迭代for循环
L1 = [1, 4, 2, 6]
Total = 0
for i in L1:
    Total = Total + i
print(Total)

对比之下，第二种方法会更加清晰。

下面我们看一些对列表的操作。
对于一个列表 
L = [2, "a", 4, [1,2]]
我们可以在一个列表后面添加元素
L.append(element)
例如
L.append(5) [2, "a", 4, [1,2], 5]
括号里的内容会作为一个元素被添加到L后面。
如果我们在输入
L.append([2,"a"])
那么L会再增加一个元素，这个元素是一个列表 [2,"a"]，这时，L变成
[2, "a", 4, [1,2], 5, [2, "a"]]

如果我们想把列表中的元素分别作为一个元素添加到L里面 ，我们要用另一个操作
L.extend(list)
如果我们输入
L.extend([“q”,1])
那么列表L后面会增加两个元素，这时L变成
[2, "a", 4, [1,2], 5, 2, [2, "a"], "q", 1]

有时候我们需要删除列表L中的元素，我们可以用
del(L[index])
来索引删除特定位置的元素,例如
del(L[3]) 
我们会删除L[3]这个元素，也就是[1,2],这时的L是
[2, 'a', 4, 5, 2, [2, 'a'], 'q', 1]
如果我想删除L的最后一个元素，我们可以输入
L.pop()
这时L的最后一个元素也就是1就被删除了，此时的L是
[2, 'a', 4, 5, 2, [2, 'a'], 'q']
如果我们知道要删除的元素的的具体值，我们还可以用
L.remove(element)
如果L中有这个元素，就会直接删除，如果L中有多个这个元素，
那么python只会删除第一个，如果L中没有这个元素，就会报错。
例如
L.remove(2)
那么L中的第一个元素2会被删除，后面的2还会被保留，这时的L是
['a', 4, 5, 2, [2, 'a'], 'q']

如果有两个列表
L1 = [1,2,3]
L2 = [2,3,4]
我们可以通过加号运算符连接两个列表
L3 = L1 + L2   L3: [1,2,3,2,3,4]
这里L1和L2的值是不会被改变的。

给定一个字符串
s = “I<3 CS”
我们可以用 list(s)将它转换成列表，
s字符串中的每个元素都会作为列表的一个元素：["I", "<", "3", " ", "C", "S"]
此外我们还可以将字符串s分割成两部分，每一部分作为一个元素存入列表里，
例如我们以 < 作为分隔符，
s.split("<") 
这时候 < 左边的所有字符被作为一个元素，右边的所有字符被作为一个元素存入列表：["I", "3 CS"]
如果我们想把列表L中所有的字符型元素连接，转换成一个字符串，我们可以使用
“ ”.join(L)
引号里是连接符，例如
L = [“a”,"b", "c"]
"".join(L)    "abc"
我们还可以在每个字符间添加连接符
“_”.join(L)  "a_b_c"






