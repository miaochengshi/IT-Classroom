这一期，我们来一起学习一下Python中函数的用法。

到目前为止，我们掌握的编程方法是，打开Spyder，
在编辑器里写入几段代码，运行，解决一个特定的问题。
如果我们需要去解决一个规模较大或者说较复杂的问题时，
如果还是这样把所有的代码都放在一个文件里，一段时间下来，
这个单一文件就会变得杂乱无章，不方便我们后期的查找，修改和调试。 
这个时候我们需要模块化的编写我们的代码。

所以我们介绍函数的概念。一个函数实现一个特定的功能，然后将多个函数按照一定的规则调用起来，
就组成了一个完整的程序。

当我们编写一段程代码时，我们更需要关注的是这段代码是否整齐有逻辑，
能够实现多少种功能，而不是关注代码有多长。

函数是供别人调用的，需要输入和输出。除非被调用，否则函数不会运行。

一个函数首先需要有个名字，其次需要有参数（可以是0个或者更多）
此外，最好有个说明文档，用来告诉别人如何使用这个函数 
需要有函数主体，也就是函数的代码实现，最后，还要有返回值。

下面我们来看一个在Python中定义的函数以及调用这个函数的方法。
def is_even( i ):
    """
    Input: i, a positive int
    Returns True if i is even, otherwise False
    """
    print("inside is_even")
    return i%2 == 0
这是一个函数的定义，我们通过下面这种方式调用这个函数：
is_even(3)

一个函数的定义从关键词 def 开始，表示这里将要开始定义一个函数
接下来 is_even 是这个函数的名字，函数的名字最好能够直观的表达出
这个函数的功能或者作用，这样后续调用起来比较方便。
括号里是这个函数的参数，也可以理解为函数的输入。
再这一行开始，以三个 引号开始，到三个引号结束之前，是注释部分
我们可以在这里写入函数的说明，告诉别人这个函数的功能，输入输出等。
再下面就是函数的主体部分
这些就是 一个 完整的 函数的定义方法。

完成之后，我们就可以来调用这个函数。 调用时我们 只需要写出函数名称，
然后给定一个参数，如这个例子里的3，参数的个数和类型要与函数的定义一致。 

在函数 主体中，最重要的是这里最后一行，以关键词 return 开始。调用这个函数的对象会获取 return 的结果。

下面我们再来看一个例子.
def f( x ):
    x = x + 1
    print("in f(x): x =", x)
    return x

x = 3
z = f(x)

这个例子里，x出现了两次，一次在函数里，一次在调用的时候。
在函数中的x，我们叫它形式参数（Formal Parameter），
之所以叫他形式参数，是因为这个参数在这里还没有一个实际的值
这里是为了告诉函数，x将会有一值，具体是什么还不知道。

只有当调用这个函数的时候(z = f(x))才知道这个值会是什么。 
这里在调用时候的x叫做实际参数（Actual Parameter），
因为这个时候，x有一个具体的值，就是上一步赋值的整数3.

在python中，所有的变量都是在变量空间或者叫作用域中的。
作用域是变量名称到对象的映射。表示的是变量生效的范围。
在进入一个函数时，就会新建一个作用域（Scope）。

在这个例子中，当程序一开始运行时，首先会创建一个全局作用域（Global Scope）
这个时候函数f会在这个全局作用域里，并且对应一些代码，
也就是函数的主体。接下来，代码运行到赋值， x=3,这时候全局作用域里增加
x和3.接下来调用函数，z = f(x),
这时候z会出现在全局作用域中，此外，因为调用函数f。
python会创建一个新的作用域。 f作用域，
里面有变量x，变量x的值来自全局作用域中x的映射，也就是3.
接下来运行函数中的赋值运算，f作用域中x的值更新为4，
然后输出一串字符串，最后函数赋值return x，返回的值
也就是f作用域中的x，此时是1，会传递给调用对象，也就是代码中的f(x)，
代码中f(x)的值为4，并赋值给z，于是全局作用域中的变量z的值变为4.

调用结束后，f作用域会被删除，所以在代码后续调用x时，x的值还是3.

如果我们在编辑函数的时候，没有写上 return，python在运行时会自动
添加上return。此时函数返回的结果是 None，
也就是等价于我们在函数最后写上了 return None。
这里的None我们第一期讲过，是一个特殊的类型。

下面我们来比较一下 return 和 print的区别。
首先 return只在函数内部有意义
一个函数内，只能有一个 return
函数中return之后的代码不会被执行
return会返回一个值，并把这个值传递给调用这个函数的对象，不会输出到控制台

print 在函数外也可以执行
在函数内可以有多个 print，对应有多个输出
函数中 print后面的代码会被继续执行
print的值会直接在控制台输出。

下面我在Spyder里用一个例子具体看一下这两个关键词的 区别。
def is_even_with_return( i ):
    """
    Input: i, a positive int
    Returns Ture is i is even, otherwise False
    """
    print("with return")
    remainder = i %  2
    return remainder == 0

z = is_even_with_return(3)

我们编辑一个判断一个整数是奇数还是偶数的函数,
返回值的布尔型，如果如果是偶数，那么这个数值处以2的余数是0，
函数就返回True，否则返回False。
另外我们在函数主体中通过print添加了一个输出

运行一下，我们可以看到控制的输出只有print中的字符串，

但是这个时候
is_even_with_return(3)
会得到一个值False,并把这个布尔型的 结果赋值给z

如果我们想输出这个值，要通过print的方式输出。
我们在下面再添件一句
print(z)
可以看到输出为
with return
False

如果我们函数中，不写 return，
def is_even_with_return( i ):
    """
    Input: i, a positive int
    Returns Ture is i is even, otherwise False
    """
    print("with return")
    remainder = i %  2

z = is_even_with_return(3)

print(z)
运行一下，可以看到结果是
with return
None
也就是python在运行时会自动添加一个
return None
下面我们来看一下，使用函数 的优势。我们还是先创建一个简单的判断是否是偶数的函数，
def is_even( i ):
    """
    Input: i, a positive int
    Returns Ture if i is even, other False
    """
    remainder = i % 2
    return remainder == 0
 然后我们通过for循环 多次调用这个函数，实现判断0-20哪些是奇数哪些是偶数，
 并在控制台输出,我们只要在主程序添加下面这段代码：
print("All numbders from 0 and 20: even or odd")
for i in range(21):
    if is_even(i):
        print(i, "even")
    else:
        print(i, "odd")

运行一下，可以看到我们的输出结果：
All numbders from 0 and 20: even or odd
0 even
1 odd
2 even
3 odd
4 even
5 odd
6 even
7 odd
8 even
9 odd
10 even
11 odd
12 even
13 odd
14 even
15 odd
16 even
17 odd
18 even
19 odd
20 even
这样，我们只写了一次函数，就调用了20次，非常方便。

在一个函数中，我们还可以嵌套定义另一个函数，例如下面这个例子：
def g(x): 
    def h():
        x = 'abc' 
    x =x + 1
    print('g: x =', x) 
    h()
    return x
x = 3
z = g(x)
我们通过这个例子再来加深一下对作用域的理解。
一开始，python会新建一个全局作用域
里面有变量g，g指向函数对象 g(x)
下一步，代码运行
x = 3
全局作用域里会增加一个变量 x，他的值是3
下一步运行
z = g(x)
调用函数g，python会新建一个g作用域，
作用域中新建变量x，x的值由主程序中的x映射过来，
这里g作用域中的x为4
下面python会在g作用域中增加变量h
h指函数对象 h(x)
下面运行
x = x+1
g作用域中的x更新为4
然后下一步在控制台输出
g: x = 4
再下一步调用函数h()
python新建一个h作用域
h作用域里增加变量x，x的值是字符串 abc
因为h中没有return，python会自动返回None。
然后清楚h作用域。
下一步函数gx return x，也就是把x当前的值4返回给主程序，
并在全局作用域增加变量z，赋值为4。然后清除g作用域。
只留下全局作用域。此时便只留下全局作用域，
我们可以看到 变量x的值为3，z的值为4.

关于程序运行中的作用域和变量的变化规则问题，
大家如果不清楚的话，可以使用 pythontutor这个网站：
http://www.pythontutor.com
把自己的代码复制进去就可以，点击最下方的可视化执行，就可以一步步运行看到作用域的变量的变化了。

下面我们通过几个习题来回顾一下这一期的内容
1. 运行下面这段代码，会输出几行结果？
def add(x, y):
    return x+y

def mult(x, y):
    print(x*y)

add(1,2)
print(add(2,3))
mult(3,4)
print(mult(4,5))

4行

2. 下面这段代码的输出是什么？
def sq(func, x):
    y = x**2
    return func(y)

def f(x):
    return x**2

calc = sq(f, 2)
print(calc)

16



因为h中没有return，python会自动返回None。

 


f作用域中有x， 
f作用域中有x， 

