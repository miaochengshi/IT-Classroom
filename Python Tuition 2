string branch repeat
前面一期介绍了一个简单的对象：int float boolean 等，今天首先介绍一下字符串。
字符串是由很多字符组成的，这些字符可以值字母，可以是数字，可以是空格，可以是特殊符号等
Python里字符串试用单引号或者双引号标志出来的，比如
hi = “Hello there” 或者 hi = ‘Hello there’ 不管是用双引号还是单引号，注意保持一致就可以。

下面我们来看一下对字符串的操作。首先是连接操作，用 + 表示，例如我们先给 hi 赋值为字符串 “Hello there”，
然后给 name 赋值 “ITClassroom”。接下来我们将这两个字符串连接，并将结果赋值给 greeting 
我们可以在spyder中写成

greet = hi + name
然后输入 print（greet）并运行看一下结果。

可以看到这里输出的 Hello thereITClassroom。Python不会在两个字符串之间填加空格。如果我们希望添加空格，
需要将空格字符串 “ ”也加入运算，写成这种形式：
greeting = hi + “ ” + name
print（greeting）
我们看一下输出，是中间是有我们添加的空格的。

python还可以对字符串“乘操作”，符号是乘法运算符，也就是星号 *。例我们写成
test = hi + （“ ” + name）*3
print（test）
输出的结果是“空格字符”和name对应的字符串连接后重复出现三次。

上一期我们讲过，想再编辑栏输出信息，我们用的是 print（）实现。例如我们给符号 x 赋值 66：
x = 66
然后想输出 66 我们只需要输入 
print（x）
同样的，我们也可以直接用 print（）直接输出字符串
当我们想用 print（）一次输出多个结果时，可以采用两种写法，一种是将多个结果用“，”隔开，
例如我们想输出多个字符串和数字混合的形式，我们可以写成
print（“My fav num is”, x, ".", "x =", x)
当我们“，”隔开不同的字符或者字符时，python会在输入的时候自动在他们之间添加一个空格。
另外一种形式是，我们直接在 print里做字符串的连接运算，首先将整数型 x 强制类型转换成字符串型：
x_str = str(x)
然后我们输入
print("My fav num is " + x_str + " ." + "x = " + x_str)
这种方法下，我们需要手动在不同的字符或者字符串之间添加空格。
大家可以根据不同的环境需求选择不同的输出方法。

使第一种方法的优点是符号前后不一定都是字符串的形式，可以是逗号前是字符串，逗号后面是 数字或者其他类型。
缺点就是会自动添加很多空格。

第二种方法的不足是必须把所有待输出的对象强制类型转换成字符串形式。

当我写算法时，输出可以把我们的结果直观的展现给用户。如果我们想达到更好的交互效果，
最好还需要用户的输入，这样我们可以通过用户的输入理解用户的需求。

在python里，我们可以用 input（） 完成请求用户输入的操作，例如，我们在编辑栏输入
text = input（"Type anthing..."）
print(5*text)
我们运行一下，看到程序运行到第一行时，会暂停，等待用户的输入，用户输入后点击回车，用户的输入会以字符串的形式赋值给符号 text
然后，按照我们的程序，text对应的字符串会被输出5次。

如果我们希望用户输入的是可以供我们直接计算的数字，我们需要对输入结果进行强制类型转换，我们输入
num = float(input("Type a number: "))
print(5*num)
我们运行一下，用户输入 2.4 时，字符串 2.4 会被强制类型转换浮点型。然后再做乘法运算并输出。 

接下来我们看一下 python中另一个运算，比较运算。
比较运算可以用来比较同一类型的两个符号，其返回值是 布尔型：两个值 True 或者 False
比较运算是定义在 整数型，浮点型和字符串型这三种类型上的。
i>j 
i >= j
i<j
i <= j
i == j 比较 i 和 j 是否完全相同，相同返回 True，否则返回 False。一个等号是赋值操作
i != j 比较 i 和 j 是否相同，不相同返回 True，否则返回 False
这里再提醒一下，运算符前后的类型必须是一致的，否则会报错。例如当我们输入
“a” > 1 时，会看到错误提示。

下面我们来看一下另外一种运算：逻辑运算，逻辑运算定义在布尔型上，他的返回结果也是布尔型
对于布尔型的符号 a 和 b。
not a 当 a 是 False 时，返回 True。
a and b 当a和b都为True时返回True，其他情况返回Flase
a or b 当a和b至少有一个为Trure返回True。

以上都是一些Python的基本操作，如果我们想设计算法或者决策，这些基本的操作时不够的，例如，
我们做判断时，会说如果怎么怎么样，就会怎么怎么样，否则的话就会怎么怎么样。
在python中，如果我们想实现这种效果，需要使用 if 语句，也就是判断语句。
判断语句是这种形式：
if 条件:
   执行语句
   ...
（条件返回值是布尔型，如果是 True就执行下面Code block里的语句）
或者下面这种
if 条件:
   执行语句1
else：
   执行语句2
   ...
也可以是这种
if 条件1:
   执行语句1
   ...
elif 条件2:
   执行语句2
   ...
else:
   执行语句3
   ...

下面我们来看一下判断两个数字大小的算法，要求用户输入两个数字，我们输出较小的数字。
如果两个数字相同就返回他们的比值。
x = float(input("Enter a number for x: "))
y = float(input("Enter a number for y: ")) 
if x == y:
    print("x and y are equal") 
    if y != 0:
        print("therefore, x / y is", x/y)
elif x < y:
    print("x is smaller")
else:
    print("y is smaller")
print("thanks!")

下面我们做一个简单的小游戏。
*************
*************
    [00]    *
*************
*************
我们希望控制 [00]这个符号左右移动，输入left，左移，输入right，右移。
在编辑栏里我们可以这样写，首先请求用户输入：
mov = input(“Next Step：”)
然后判断用户的输入，如果输入 right，执行右移，并输出现在的状态。
if mov == “right”:
   print("*************")
   print("*************")
   print("       [00] *")
   print("*************")
   print("*************")
如果用户输入left，执行左移并输出现在的状态。
if moc == "left":
   print("*************")
   print("*************")
   print(" [00]       *")
   print("*************")
   print("*************")




