上一期我们介绍了使用 range 的格式来定义for循环，
这种方法只能定义在一串连续的整数上，这一期，
我们首先来介绍一种更加通用的for循环的定义方法，
我们将for循环直接在字符串对象上面迭代。
然后会介绍几种简单的算法。

此外，本期视频还将介绍一些如何写出美观易用的代码

到目前为止，我们掌握的编程方法是，打开Spyder，
然后在编辑器里写入几段代码，然后解决一个特定的问题。
这种方法用在解决小规模的问题上，没什么问题，但是如果
我们需要去解决一个规模较大或者说较复杂的问题时，
如果我们还是这样把所有的代码都放在一个文件里，一段时间下来，
这个单一文件就会变得杂乱无章，不方便我们后期的查找，修改和调试。 
这个时候我们需要模块化的编写我们的代码。这里我们就引入函数的概念。
一个函数实现一个特定的功能，然后将多个函数按照一定的规则调用起来，
就组成了我们完整的程序。

当我们编写一段程序时，我们更需要关注的是这个程序
能够实现多少种功能，而不是关注代码有多长。

我们举个例子，你能在很短的时间内搞明白一投影内部是如何工作的吗？
很难，但是我们可以在很短的时间内明白如何去使用这台投影仪。
一定程度上讲，对我们来说，这台投影仪是一个黑盒，
我们使用它时不需要明白它内部是如何工作的。我们在乎的只是他的“输入和输出 ”
输入就是我们给它信号，比如接线，输出就是它把图像投影到墙上或者幕布上。

如果是一个很大的舞台上，有时候需要使用多个投影仪来完成一个
很大的场面的投影，一个投影仪投影场面的一个部分，然后多个部分拼接起来

函数的特点，定义一次，但是可以重复使用。用来给代码分段，让代码显得有条理。

本期我们来一起学习一下如何使用函数让代码变得有条理，
后期，我们会一起学习如何使用类让代码变得更有条理。

函数是供人调用的，需要输入和输出。除非被调用，否则函数不会运行。

需要有人制作投影仪，就是写函数，有人用投影仪，就是调用。

一个函数首先需要有个名字，其次需要有参数（可以是0个或者更多）
此外，最好有个说明文档，用来告诉 别人如何使用这个函数 
需要有主体，最后，还要有返回值。

下面我们来看一个在Python中定义的函数以及调用这个函数的方法。
def is_even( i ):
    """
    Input: i, a positive int
    Returns True if i is even, otherwise False
    """
    print("inside is_even")
    return i%2 == 0
这是一个函数的定义，我们通过下面这种方式调用这个函数：
is_even(3)

一个函数的定义从关键词 def 开始，表示这里将要开始定义一个函数
接下来 is_even 是这个函数的名字，函数的名字最好能够直观的表达出
这个函数的功能或者作用，这样后续调用起来比较方便。
括号里是这个函数的参数，也可以理解为函数的输入。
再这一行开始，以三个 引号开始，到三个引号结束之前，是注释部分
我们可以在这里写入函数的说明，告诉别人这个函数的功能，输入输出等。
再下面就是函数的主体部分
这些就是 一个 完整的 函数的定义方法。

完成之后，我们就可以来调用这个函数。 调用时我们 只需要写出函数名称，
然后给定一个参数，如这个例子里的3，参数的个数和类型要与函数的定义一致。 

在函数 主体中，最重要的是这里最后一行，以关键词 return 开始。调用这个函数的对象会获取 return 的结果。

下面我们再来看一个例子.
def f( x ):
    x = x + 1
    print("in f(x): x =", x)
    return x

x = 3
z = f(x)

这个例子里，x出现了两次，一次在函数里，一次在调用的时候。
在函数中的x，我们叫它形式参数（Formal Parameter），
之所以叫他形式参数，是因为这个参数在这里还没有一个实际的值
这里是为了告诉函数，x将会有一值，具体是什么还不知道。

只有当调用这个函数的时候(z = f(x))才知道这个值会是什么。 
这里在调用时候的x叫做实际参数（Actual Parameter），
因为这个时候，x有一个具体的值，就是上一步赋值的整数3.

在python中，所有的变量都是在变量空间或者叫作用域中的。
作用域是变量名称到对象的映射。表示的是变量生效的范围。
在进入一个函数时，就会新建一个作用域（Scope）。

在这个例子中，当程序一开始运行时，首先会创建一个全局作用域（Global Scope）
这个时候函数f会在这个全局作用域里，并且对应一些代码，
也就是函数的主体。接下来，代码运行到赋值， x=3,这时候全局作用域里增加
x和3.接下来调用函数，z = f(x),
这时候z会出现在全局作用域中，此外，因为调用函数f。
python会创建一个新的作用域。 f作用域，
里面有变量x，变量x的值来自全局作用域中x的映射，也就是3.
接下来运行函数中的赋值运算，f作用域中x的值更新为4，
然后输出一串字符串，最后函数赋值return x，返回的值
也就是f作用域中的x，此时是1，会传递给调用对象，也就是代码中的f(x)，
代码中f(x)的值为4，并赋值给z，于是全局作用域中的变量z的值变为4.

调用结束后，f作用域会被删除，所以在代码后续调用x时，x的值还是3.

如果我们在编辑函数的时候，没有写上 return，python在运行时会自动
添加上return。此时函数返回的结果是 None，
也就是等价于我们在函数最后写上了 return None。
这里的None我们第一期讲过，是一个特殊的类型。
f作用域中有x， 



li

