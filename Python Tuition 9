这一期我们来一起学习一下Python中的面向对象编程。
Python从设计之初就已经是一门面向对象的语言
首先我们来看一下什么是对象。
在python中，对象一般都是数据
目前我们见到的每一个对象都有一个特定的类型

例如这些我们已经见到过的，数值1234是一个对象，他的类型是整数型
3.1415也是一个对象，他的类型是浮点型
“Hello” 是字符串型对象
[1, 2, 3, 4] 是一个列表类型的对象
{"CA":"California", "MA":Massachusetts} 是一个字典类型的对象
实际上，Python中所有的东西都被称作对象，每个对象都有一个类型。
例如我们编写一个函数，我们可以将这个函数作为一个参数传递或者调用，因此函数也是一个对象。
对象是类型的一个实例。例如前面说的1234这个对象是整数型的一个实例。

首先，我们可以创建某个类型的对象，
对于一个对象，我们可以去操作它，比如修改，连接，移动等等
此外，我们还可以去销毁一个对象。例如一个创建好的列表，我们可以用del命令清除它。

定一个对象，首先需要定义对象代表什么。
然后需要明确如何与这个对象交互

例如列表这个列表类型的对象，L=[1,2,3,4]
L = 1 -> 2 ->3 -> 4 ->
我们首先看一下，对于python来说，这个列表是什么样子的。
实际上，在python中，每一个索引位置对应这个列表中的一个元素。
例如，位置0，对应1这个元素。以为他是列表的第一个元素。
另外在每个元素后面还有一个指针，这个指针用来指引python下一个索引的位置。
这样python就知道索引位置1对应的元素，同样的，这个元素后面也有一个指针指向下一个索引位置。
以此类推，这就是python内部表示这个列表类型的对象的方法。

然后我们看一下如何与这个对象交互，这个问题我们在介绍列表的时候相信讲解过，
我们有很多方法与一个列表交互，例如
L[i], L[i:j], +
len(), min(), max(), del(L[i])
L.append(),L.extend(),L.count(),L.index(),
L.insert(),L.pop(),L.remove(),L.reverse(), L.sort()

从这样一个例子我们可以看出来，我们只需要用事先定义好的这个操作指令就可以完成对一个对象或者一些对象的操作，
而不需要了解每一个对象是如何在python中创建的，以及每一个操作内部是如何工作的。

这也就是对象的一个重要特征，他的内部含义应该是不公开的，也就是私密的。

面向对象编程可以将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程。
使系统更加灵活、更加易于维护。

刚才我们提到，每一个对象都有一个特定的类型，我们要创建一个对象，首先要定一个这样一个类型，也就是类（Class），
对象是类的实例，类用来描述具有相同的属性和方法的对象的集合。
比如前面的例子，列表就是事先定义好的一个类。

要创建一个类，首先我们要做的是定义类的名称，然后根据我们的需要定义类的一些属性。

当我们要去使用我们创建的一个类时，我们首先要创建一个该类的实例，然后对这个实例做一些操作。

接下来，我们来一起学习一下如何根据我们自己的需求去创建一个新的类。
class 类名称:
   #define attributes here
与函数的定义格式类似，类的创建以关键词 class 开始，后面定义类的名称，
然后在下面定义类属性，包括数据属性和方法。

例如我们创建一个坐标类Coordinate。
class Coordinate:
下面定义类的数据属性，一般我们在 __init__ 中定义数据属性。例如一个平面坐标有两个数值，
我们采用下面的格式定义数据属性。
class Coordinate:
    def __init__(self, x, y):
        self.x = x
        self.y = y
这里的self代表类的实例，self在定义类的方法时是必须有的。self是指向我们创建的实例的。
创建类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是self。
在创建实例的时候不需要输入这个参数，对于这个例子，我们在创建实例的时候只需要输入两个两个变量x和y就可以了。
接下来，在这个数据属性的定义中，我们定义了每一个实例都有两个参数，x和y，并可以通过点号去索引。

这样我们就创建了一个坐标类，下面我们就可以创建这个类的实例了。
c = Coordinate(3.8, 2.6)
origin = Coordinate(0, 0)
print(c.x)
print(origin.y)
我们创建了一个坐标c和一个坐标origin。可以使用点号 . 来访问对象的属性。我们可以通过c.x和c.y获取坐标c的坐标值，
通过origin.x和origin.y获取坐标origin的坐标值。

到目前为止，这个坐标类我们只定义了它的数据属性，如果我想对类的实例进行操作，我还要继续定义它的方法。
比如我们定义个计算距离的方法distance。如果要计算距离，我们需要两个坐标才行，也就是distance定义的参数中包含两个实例。
class Coordinate(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def distance(self, other):
        x_diff_sq = (self.x - other.x)**2
        y_diff_sq = (self.y - other.y)**2
        return (x_diff_sq + y_diff_sq)**0.5
        
c = Coordinate(3, 4)
origin = Coordinate(0, 0)
print(c.x)
print(origin.x)
print(c.distance(origin))
print(Coordinate.distance(c,origin))

3
0
5.0
5.0

print(c)
<__main__.Coordinate object at 0x7ff8ce86a588> 

class Coordinate(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def distance(self, other):
        x_diff_sq = (self.x - other.x)**2
        y_diff_sq = (self.y - other.y)**2
        return (x_diff_sq + y_diff_sq)**0.5
    def __str__(self):
        return "<" + str(self.x) + "," + str(self.y) + ">"
c = Coordinate(3, 4)
origin = Coordinate(0, 0)
print(c.x)
print(origin.x)
print(c.distance(origin))
print(Coordinate.distance(c,origin))

print(c)
3
0
5.0
5.0
<3,4>
__str__ 返回一个对象的描述信息(必须是string)
_str__方法需要返回一个字符串，当做这个对象的描写

print(type(c))
 <class __main__.Coordinate> 因为对象c是类Coordinate
print(Coordinate)
 <class __main__.Coordinate> 因为Coordinate就是类
print(type(Coordinate))
 <type 'type'> 因为Coordinate类是对象的一种类型

print(isinstance(c, Coordinate)) 查看一个对象是否是类Coordinate

常用的方法：
__add__(self, other)    self + other
__sub__(self, other)    self - other
__eq__(self, other)     self == other
__lt__(self, other)     self < other
__len__(self)           len(self)
__str__(self)           print self

下面我们来看一个例子，建立一个分数类
class Fraction(object):
    """
    A number represented as a fraction
    """
    def __init__(self, num, denom):
        """ num and denom are integers """
        assert type(num) == int and type(denom) == int, "ints not used"
        self.num = num
        self.denom = denom
    def __str__(self):
        """ Retunrs a string representation of self """
        return str(self.num) + "/" + str(self.denom)
    def __add__(self, other):
        """ Returns a new fraction representing the addition """
        top = self.num*other.denom + self.denom*other.num
        bott = self.denom*other.denom
        return Fraction(top, bott)
    def __sub__(self, other):
        """ Returns a new fraction representing the subtraction """
        top = self.num*other.denom - self.denom*other.num
        bott = self.denom*other.denom
        return Fraction(top, bott)
    def __float__(self):
        """ Returns a float value of the fraction """
        return self.num/self.denom
    def inverse(self):
        """ Returns a new fraction representing 1/self """
        return Fraction(self.denom, self.num)

a = Fraction(1,4)
b = Fraction(3,4)
c = a + b # c is a Fraction object
print(c)
print(float(c))
print(Fraction.__float__(c))
print(float(b.inverse()))


 

